## The pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
#set the value of the matrix
empty <- NULL
set <- function(y) {
x <<- y
empty <<- NULL
}
#get the value of the matrix
get <- function() x
#set the value of the inverse
setinvers <- function(inverse) empty<<- inverse
#get the value of the inverse
getinverse <- function() empty
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
#Checks if the inverse has already been calculated
#If so, it gets the inverse from the cache and skips the computation
#Otherwise, calcualte the inverse if the matrix
#and set the value to "setinvers"
}
## The pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
#set the value of the matrix
empty <- NULL
set <- function(y) {
x <<- y
empty <<- NULL
}
#get the value of the matrix
get <- function() x
#set the value of the inverse
setinvers <- function(inverse) empty<<- inverse
#get the value of the inverse
getinverse <- function() empty
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
#Checks if the inverse has already been calculated
#If so, it gets the inverse from the cache and skips the computation
#Otherwise, calcualte the inverse if the matrix
#and set the value to "setinvers"
}
## The pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
#set the value of the matrix
empty <- NULL
set <- function(y) {
x <<- y
empty <<- NULL
}
#get the value of the matrix
get <- function() x
#set the value of the inverse
setinvers <- function(inverse) empty<<- inverse
#get the value of the inverse
getinverse <- function() empty
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
#Checks if the inverse has already been calculated
#If so, it gets the inverse from the cache and skips the computation
#Otherwise, calcualte the inverse if the matrix
#and set the value to "setinvers"
}
## The pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
#set the value of the matrix
calculation <- NULL
set <- function(y) {
x <<- y
calculation <<- NULL
}
#get the value of the matrix
get <- function() x
#set the value of the inverse
setinverse <- function(inverse) calculation<<- inverse
#get the value of the inverse
getinverse <- function() calculation
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
#Checks if the inverse has already been calculated
#If so, it gets the inverse from the cache and skips the computation
calculation <- x$getinverse()
if (!is.null(calculation)) {
message("getting cached data")
return(calculation)
}
#Otherwise, calcualte the inverse if the matrix
#and set the value to "setinvers"
data <- x$get()
calculation <- inverse(data, ...)
x$setinverse(calculation)
calculation
}
aMatrix <- matrix(1,2,3,4,5,0)
aMatrix <- matrix([1:2],[3:4])
aMatrix <- matrix([1:2],[3:4], 2)
## The pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
#set the value of the matrix
calculation <- NULL
set <- function(y) {
x <<- y
calculation <<- NULL
}
#get the value of the matrix
get <- function() x
#set the value of the inverse
setinverse <- function(inverse) calculation<<- solve(x)
#get the value of the inverse
getinverse <- function() calculation
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
#Checks if the inverse has already been calculated
#If so, it gets the inverse from the cache and skips the computation
calculation <- x$getinverse()
if (!is.null(calculation)) {
message("getting cached data")
return(calculation)
}
#Otherwise, calcualte the inverse if the matrix
#and set the value to "setinvers"
data <- x$get()
calculation <- inverse(data, ...)
x$setinverse(calculation)
calculation
}
a <- c(1,2,3,4,5,6,7)
aMatrix <- (a, nrow = 2, ncol=3)
aMatrix <- (a, nrow = 3, ncol=3)
aMatrix <- matrix(a, nrow = 3, ncol=3)
aMatrix
b <- makeCacheMatrix(aMatrix)
cacheSolve(b)
## The pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
#set the value of the matrix
calculation <- NULL
set <- function(y) {
x <<- y
calculation <<- NULL
}
#get the value of the matrix
get <- function() x
#set the value of the inverse
setinverse <- function(inverse) calculation<<- solve(x)
#get the value of the inverse
getinverse <- function() calculation
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
#Checks if the inverse has already been calculated
#If so, it gets the inverse from the cache and skips the computation
calculation <- x$getinverse()
if (!is.null(calculation)) {
message("getting cached data")
return(calculation)
}
#Otherwise, calcualte the inverse if the matrix
#and set the value to "setinvers"
data <- x$get()
calculation <- solve(data, ...)
x$setinverse(calculation)
calculation
}
rm(b)
b <- makeCacheMatrix(a)
cacheSolve(b)
aMatrix
dim(aMatrix)
b <- makeCacheMatrix(aMatrix)
cacheSolve(b)
solve(aMatrix)
